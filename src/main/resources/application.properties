#********************************************************************
# = Application Server Configuration file
#********************************************************************
# Change server port
server.port=8081
# Maximum amount of worker threads
server.tomcat.threads.max=200
# Database connection properties
#spring.datasource.url=jdbc:mysql://localhost:3306/Spring_Security_5?CreateIfNotExistsAsync
#spring.datasource.username=root
#spring.datasource.password=developer
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Jpa needs the type of DB backend we have, the following values are valid:
# [DB2,DEFAULT,DERBY,H2,HANA,HSQL,INFORMIX,MYSQL,ORACLE,POSTGRESQL,SQL_SERVER,SYBASE]
spring.jpa.database=MYSQL
# set this value to [update] value so that a table will be created in the database
# automatically corresponding to defined data model. Any change to the model
# will also trigger an update to the table. For production, this property should be [validate].
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
##********************************************************************
## Initialize a Database
##********************************************************************
## Spring Boot can automatically create the schema (DDL scripts) of your
## DataSource and initialize it (DML scripts). It loads SQL from the standard
## root classpath locations: schema.sql and data.sql, respectively. In addition,
## Spring Boot processes the schema-${platform}.sql and data-${platform}.sql
## files (if present), where platform is the value of spring.datasource.platform.
## This allows you to switch to database-specific scripts if necessary. For
## example, you might choose to set it to the vendor name of the database
## (hsqldb, h2, oracle, mysql, postgresql, and so on).
## Create the schema (DDL scripts) of your DataSource and initialize it (DML scripts)
## Loads SQL from the standard root classpath locations: schema.sql and data.sql,
## respectively. In addition, Spring Boot processes the schema-${platform}.sql and
## data-${platform}.sql files (if present), where platform is the value of:
## spring.datasource.platform={platform}
#spring.sql.init.platform=mysql
## Spring Boot automatically creates the schema of an embedded DataSource. This
## behavior can be customized by using the spring.datasource.initialization-mode
## property (and it can also be always or never).
##spring.datasource.initialization-mode=always
## By default, Spring Boot enables the fail-fast feature of the Spring JDBC
## initializer, so, if the scripts cause exceptions, the application fails to
## start. You can tune that behavior by setting:
## spring.datasource.continue-on-error=[true|false]
## NOTE: In a JPA-based app, you can choose to let Hibernate create the schema
## or use schema.sql, but you cannot do both. Make sure to disable
## spring.jpa.hibernate.ddl-auto if you use schema.sql.
##spring.datasource.continue-on-error=true
## Keep the connection alive if idle for a long time (needed in production)
##spring.datasource.testWhileIdle=true
##spring.datasource.validationQuery = SELECT 1
## JPA properties
#spring.jpa.show-sql=true
## disable database queries being performed during view rendering
#spring.jpa.open-in-view=false
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
################################################################################
##  24.15. Automatic schema generation
################################################################################
#### https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#configurations-hbmddl
## Setting to perform SchemaManagementTool actions automatically as part of the
## SessionFactory lifecycle. Valid options are defined by the externalHbm2ddlName
## value of the Action enum: (e.g. none (default value), create-only, drop, create, create-drop, validate, and update)
#spring.jpa.properties.hibernate.hbm2ddl.auto=update
## Setting to perform SchemaManagementTool actions automatically as part of the
## SessionFactory lifecycle. Valid options are defined by the externalJpaName
## value of the Action enum: (e.g. none (default value), create-only, drop, create, create-drop, validate, and update)
#spring.jpa.properties.javax.persistence.schema-generation.database.action=update
## Specifies the drop script file as either a java.io.Reader configured for reading of the
## DDL script file or a string designating a file java.net.URL for the DDL script.
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=SQL/entrypoint/schema.sql
## For cases where the javax.persistence.schema-generation.scripts.action value
## indicates that schema dropping commands should be written to DDL script file,
## javax.persistence.schema-generation.scripts.drop-target specifies either a
## java.io.Writer configured for output of the DDL script or a string specifying the file URL for the DDL script.
#spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-target=SQL/entrypoint/schema.sql
## Setting to perform SchemaManagementTool actions writing the commands into a
## DDL script file. Valid options are defined by the externalJpaName value of the
## Action enum: (e.g. none (default value), create-only, drop, create, create-drop, validate, and update)
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=update
## Specifies whether schema generation commands for schema creation are to be determined
## based on object/relational mapping metadata, DDL scripts, or a combination of the two.
## See SourceType for valid set of values.
## If no value is specified, a default is assumed as follows:
##   if source scripts are specified (per javax.persistence.schema-generation.create-script-source),
## then script is assumed otherwise, metadata is assumed
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
## Specifies whether schema generation commands for schema dropping are to be determined
## based on object/relational mapping metadata, DDL scripts, or a combination of the
## two. See SourceType for valid set of values.
#spring.jpa.properties.javax.persistence.schema-generation.drop-source=metadata
#spring.jpa.properties.javax.persistence.create-database-schemas=true
################################################################################
## Naming strategy
#spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
## Enable spring data repos
#spring.data.jpa.repositories.enabled=true
## Enable error logging
##server.error.include-message=always
#
##server.error.include-stacktrace=always
#
#spring.mvc.view.prefix=classpath:templates/
#spring.mvc.view.suffix=.html
#spring.mvc.static-path-pattern=classpath:/templates
## server.tomcat.remoteip.remote-ip-header=x-forwarded-for
## server.tomcat.remoteip.protocol-header=x-forwarded-proto
#spring.main.allow-bean-definition-overriding=true
spring.main.allow-bean-definition-overriding=true
spring.jpa.open-in-view=true